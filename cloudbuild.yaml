# A Cloud Build configuration file for building and deploying a Kubeflow pipeline.

# This section configures the logs bucket. It is required when using a
# custom service account for the build.
options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
logs_bucket: 'gs://63621516867-us-central1-cloudbuild-logs'

steps:
# Step 1: Build the custom Docker image.
# This single image will contain all necessary tools: gcloud, kubectl,
# gke-gcloud-auth-plugin, and the kfp SDK.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest', '.']

# Step 2: Get GKE cluster credentials.
# The `gcloud` command is run from the newly built image, which
# has the gke-gcloud-auth-plugin installed.
- name: 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'
  entrypoint: 'gcloud'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - "${_CLUSTER_NAME}"
  - '--zone=${_ZONE}'
  - '--project=${_PROJECT_ID}'

# Step 3: Compile the Kubeflow pipeline.
- name: 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'
  entrypoint: 'python3'
  args: ['pipeline.py']
  env:
  - 'KUBECONFIG=/builder/home/.kube/config'

# Step 4: Upload the compiled pipeline.
# The `kfp` command is also run from the custom image, ensuring it has
# access to the necessary authentication plugins and the kubeconfig file.
- name: 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'
  entrypoint: 'kfp'
  args:
  - 'pipeline'
  - 'upload'
  - '--pipeline-package'
  - 'healthcare_ml_pipeline.yaml'
  - '--pipeline-name'
  - 'healthcare-data-ml-pipeline'
  env:
  - 'KUBECONFIG=/builder/home/.kube/config'

# This section lists the Docker images to be pushed to Google Container Registry.
images:
- 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'

# This section defines the substitution variables used in the steps.
substitutions:
  _PROJECT_ID: advance-replica-466713-n7
  _CLUSTER_NAME: kubeflow-healthcare-cluster
  _ZONE: us-central1-a
