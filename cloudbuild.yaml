# A Cloud Build configuration file for building and deploying a Kubeflow pipeline.

# This section configures the logs bucket. It is required when using a
# custom service account for the build. Cloud Build will store build logs
# in this specified Google Cloud Storage bucket.
options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET
logs_bucket: 'gs://63621516867-us-central1-cloudbuild-logs'

# The 'steps' section defines the sequence of operations Cloud Build will execute.
steps:
# Step 1: Get GKE cluster credentials.
# This step uses the 'kubectl' Cloud Builder, which is pre-configured with
# the necessary 'gke-gcloud-auth-plugin' for GKE authentication.
# It fetches the credentials for the specified GKE cluster and configures
# kubectl to use them, storing the kubeconfig in the build environment.
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'get-credentials'
  - "${_CLUSTER_NAME}"   # The name of your GKE cluster
  - '--zone=${_ZONE}'    # The zone where your GKE cluster is located
  - '--project=${_PROJECT_ID}' # Your Google Cloud project ID

# Step 2: Build the Docker image for your Kubeflow pipeline components.
# This step uses the 'docker' Cloud Builder to build an image from your
# Dockerfile in the current directory. The image is tagged with your
# project ID and a specific name.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest', '.']

# Step 3: Compile the Kubeflow pipeline.
# This step runs the Python script that defines and compiles your Kubeflow pipeline
# (e.g., 'pipeline.py' generates 'healthcare_ml_pipeline.yaml').
# It uses the Docker image built in the previous step, ensuring all necessary
# Python dependencies (including the kfp SDK) are available.
# No explicit KUBECONFIG env variable is needed here as this step is for compilation,
# not direct interaction with the KFP API server.
- name: 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'
  entrypoint: 'python3'
  args: ['pipeline.py']

# Step 4: Upload the compiled pipeline to Kubeflow Pipelines.
# This step uses the 'kubectl' Cloud Builder again to apply the compiled pipeline
# YAML file directly to your Kubernetes cluster. This is the recommended way
# to deploy pipelines when using Cloud Build with GKE, as it leverages kubectl's
# robust authentication and avoids direct API calls from the kfp SDK within the build.
# The 'kubeconfig' created in Step 1 is automatically used by this kubectl builder.
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'apply'
  - '-f'
  - 'healthcare_ml_pipeline.yaml' # The compiled pipeline YAML file

# The 'images' section specifies the Docker images that Cloud Build should push
# to Google Container Registry (GCR) or Artifact Registry after a successful build.
images:
- 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'

# The 'substitutions' section defines variables that can be used throughout
# the build configuration. These values can be overridden at build time.
substitutions:
  _PROJECT_ID: advance-replica-466713-n7
  _CLUSTER_NAME: kubeflow-healthcare-cluster
  _ZONE: us-central1-a
