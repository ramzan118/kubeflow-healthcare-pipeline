# This configuration file is for Google Cloud Build.
# It builds a Docker image, runs a Python script to compile a pipeline,
# and then applies it to a Kubeflow cluster.

options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET

steps:
# Step 1: Get credentials for the GKE cluster.
# This step is crucial for authentication and correctly uses gcloud to fetch credentials
# for your specific cluster, project, and zone.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud container clusters get-credentials "${_CLUSTER_NAME}" \
      --zone "${_ZONE}" \
      --project "${_PROJECT_ID}"

# Step 2: Build the Docker image.
# This step builds the image with the necessary code and dependencies.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest', '.']

# Step 3: Compile the Kubeflow pipeline.
# This step uses the image you just built and runs your pipeline.py script.
# The script is expected to generate a file named 'healthcare_ml_pipeline.yaml'.
- name: 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'
  entrypoint: 'python3'
  args: ['pipeline.py']

# Step 4: Apply the compiled pipeline to Kubeflow.
# This step uses kubectl to deploy the pipeline manifest file.
# The 'KUBECONFIG' environment variable correctly points to the credentials
# fetched in the first step, resolving the previous authentication error.
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'apply'
  - '-f'
  - 'healthcare_ml_pipeline.yaml'
  env:
  - 'KUBECONFIG=/builder/home/.kube/config'

images:
# This section tells Cloud Build to automatically push the built Docker image
# to your Container Registry.
- 'gcr.io/${_PROJECT_ID}/kubeflow-pipeline-components:latest'

substitutions:
# Define the variables to be used throughout the build process.
  _PROJECT_ID: advance-replica-466713-n7
  _CLUSTER_NAME: kubeflow-healthcare-cluster
  _ZONE: us-central1-a
